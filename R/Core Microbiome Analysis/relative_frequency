#!/usr/bin/env Rscript
library(phyloseq)
library(ape) # importing trees
library(tidyverse)
library(vegan)
library(microbiome)
library("ggVennDiagram")
library(plyr)
library(qualpalr)
library(ggpubr)
### Load function dephyloseq to get an object out of phyloseq into a dataframe ###
dephyloseq = function(phylo_obj){
  ## get the metadata
  meta = as.data.frame(as.matrix(phylo_obj@sam_data))
  ## how many metadata columns you have
  metacols = ncol(meta)+1
  ## get out the otu table
  ## if your metadta is empty after running this, you need to use
  otu = as.data.frame(t(as.matrix(phylo_obj@otu_table)))
  #otu = as.data.frame(as.matrix(phylo_obj@otu_table))
  ## merge the metadata and otu table by the rownames (sample ids from the Illumina sequencing data)
  mo = merge(meta, otu, by=0)
  ## get out the taxonomy file
  tax = as.data.frame(phylo_obj@tax_table)
  ## get the ASV ID out. This the matches the placeholder ASV ID in the OTU table
  tax = tax %>% rownames_to_column(var="asv_id")
  ## pivot longer to be able to match the ASVs in the OTU table to the taxonomy table
  mo = mo %>% pivot_longer(cols = -c(1:metacols), names_to = "asv_id", values_to="asv_abundance")
  ## Join the metadata and otu table with the taoxnomy table
  mot = full_join(mo, tax)
  ## Specify the output for the dephyloseq funciton
  output = mot
}

#### Load data ####
# Change file paths as necessary
metafp <- "MICB_421_Soil_Metadata.tsv"
meta <- read_delim(metafp, delim="\t")

otufp <- "feature-table.txt"
otu <- read_delim(file = otufp, delim="\t", skip=1)

taxfp <- "taxonomy.tsv"
tax <- read_delim(taxfp, delim="\t")

phylotreefp <- "tree.nwk"
phylotree <- read.tree(phylotreefp)

#### Format OTU table ####
# OTU tables should be a matrix
# with rownames and colnames as OTUs and sampleIDs, respectively
# Note: tibbles do not allow rownames so if you imported with read_delim, change back

# save everything except first column (OTU ID) into a matrix
otu_mat <- as.matrix(otu[,-1])
# Make first column (#OTU ID) the rownames of the new matrix
rownames(otu_mat) <- otu$`#OTU ID`
# Use the "otu_table" function to make an OTU table
OTU <- otu_table(otu_mat, taxa_are_rows = TRUE) 
class(OTU)

#### Format sample metadata ####
# Save everything except sampleid as new data frame
samp_df <- as.data.frame(meta[,-1])
# Make sampleids the rownames
View(meta)
rownames(samp_df)<- meta$'#SampleID'
# Make phyloseq sample data with sample_data() function
SAMP <- sample_data(samp_df)
class(SAMP)

#### Formatting taxonomy ####
# Convert taxon strings to a table with separate taxa rank columns
tax_mat <- tax %>% select(-Confidence)%>%
  separate(col=Taxon, sep="; "
           , into = c("Domain","Phylum","Class","Order","Family","Genus","Species")) %>%
  as.matrix() # Saving as a matrix
colnames(tax_mat)[colnames(tax_mat) == "Feature ID"] <- "Feature_ID"


## Separate the columns within tax_mat
col_name <- colnames(tax_mat)
len = length(tax_mat)/8
a <- 0
for (i in col_name){
  abefore <- len*a+1
  anext <- len*(a+1)
  print(abefore)
  print(anext)
  assign(i, tax_mat[len*a+1:anext])
  a <- a+1
}

#add tax frequency rows
Phylumval <- ifelse(!is.na(Phylum), 1, 0)
Classval <- ifelse(!is.na(Class), 1, 0)
Orderval <- ifelse(!is.na(Order), 1, 0)
Familyval <- ifelse(!is.na(Family), 1, 0)
Genusval <- ifelse(!is.na(Genus), 1, 0)
Speciesval <- ifelse(!is.na(Species), 1, 0)

#put them together
new_tax_mat <- matrix(data=c(Feature_ID, Domain, Phylum, Class, Order, 
                             Family, Genus, Species, Phylumval, Classval, 
                             Orderval, Familyval, Genusval, Speciesval),
                      nrow=length(Domain),
                      byrow=FALSE
                      )

new_tax_mat <- cbind(Feature_ID, Domain, Phylum, Class, Order, 
                        Family, Genus, Species, Phylumval, Classval, 
                        Orderval, Familyval, Genusval, Speciesval)

# Save everything except feature IDs 
new_tax_mat <- new_tax_mat[,-1]# Make sampleids the rownames
rownames(new_tax_mat) <- tax$`Feature ID`

# Make taxa table
TAX <- tax_table(tax_mat)
class(TAX)

mpt <- phyloseq(OTU, SAMP, TAX, phylotree)

#### Looking at phyloseq object #####
# View components of phyloseq object with the following commands
otu_table(mpt)
sample_data(mpt)
tax_table(mpt)
phy_tree(mpt)


## summarize
#seagrass=tax_glom(mpt, taxrank="Species")
#seagrass@sam_data$read_depth= sample_sums(seagrass)   
#seagrassdf = dephyloseq(mpt)

## taxaplot steps
tax_table_df <- as.data.frame(mpt@tax_table)
tax_table_df$Phylumval <- ifelse(!is.na(tax_table_df$Phylum), 1, 0)

mpt@tax_table$Phylumval <- ifelse(!is.na(mpt@tax_table$Phylum), 1, 0)
seagrassdf$Classval <- ifelse(!is.na(seagrassdf$Class), 1, 0)
seagrassdf$Orderval <- ifelse(!is.na(seagrassdf$Order), 1, 0)
seagrassdf$Familyval <- ifelse(!is.na(seagrassdf$Family), 1, 0)
seagrassdf$Genusval <- ifelse(!is.na(seagrassdf$Genus), 1, 0)
seagrassdf$Speciesval <- ifelse(!is.na(seagrassdf$Species), 1, 0)

countphylum <- sum(seagrassdf$Phylumval)
countclass <- sum(seagrassdf$Classval)
countorder <- sum(seagrassdf$Orderval)
countfamily <- sum(seagrassdf$Familyval)
countgenus <- sum(seagrassdf$Genusval)
countspeices <- sum(seagrassdf$Speciesval)

## make names for plot
seagrassdf$plotnames = paste0(seagrassdf$Soil.Classification)
samplegroups = unique(seagrass.sum$Soil.Classification)

for (i in samplegroups) {
  freq_phylum <- sum(seagrassdf$Phylumval == 1)/sum(seagrassdf$Phylumval)*6
  freq_class <- sum(seagrassdf$Classval ==1)/sum(seagrassdf$Phylumval)*6
  freq_order <- sum(seagrassdf$Orderval ==1)/sum(seagrassdf$Phylumval)*6
  freq_family <- sum(seagrassdf$Familyval == 1)/sum(seagrassdf$Phylumval)*6
  freq_genus <- sum(seagrassdf$Genusval == 1)/ sum(seagrassdf$Phylumval)*6
  freq_speices <- sum(seagrassdf$Speciesval == 1)/sum(seagrassdf$Phylumval)*6
}


seagrassdf$relativefreq = as.numeric(seagrassdf$asv_abundance)/as.numeric(seagrassdf$read_depth)
seagrassdf$plotnames = paste0(seagrassdf$Order,";",seagrassdf$Genus)

## Set up a loop to make many plots at once
## summarize data by soil classification.
seagrass.sum = ddply(seagrassdf, c("Soil.Classification", "plotnames"),
                     summarise,
                     sum = sum(relativeabundance))
## get list of the substrate types.
sorted = seagrass.sum[order(-seagrass.sum$sum),]
top.df = NULL
for(i in samplegroups) {
  for(j in i) {
    sample = subset(sorted, sorted$Soil.Classification %in% c(j))
    top = sample[c(1:10),] ##get top 10 genera
    t.tmp <- top
    top.df <- rbind.fill(top.df, t.tmp)
  }
}
## add identifier for top 10 taxa
top.df$place = "top_10"

## combine top 10 taxa for each soil classification for entire dataset
alldata = full_join(seagrassdf, top.df)
alldata$place = replace(alldata$place, is.na(alldata$place), "bottom")
alldata[alldata$place == "bottom",]$plotnames <- "Others"

## select colours to use for the plot
numcol <- length(unique(alldata$plotnames))
set.seed(10)
newpal <- qualpal(n=numcol, colorspace = "pretty")
hex = as.data.frame(newpal$hex)
colnames(hex) <- c("taxa_color")
tops = as.data.frame(c(unique(alldata$plotnames)))
colnames(tops) <- c("plotnames")
topcolors = cbind(tops,hex)
topcolors[is.na(topcolors$plotnames),]$taxa_color <- "grey90"
plotcolors <- topcolors$taxa_color
names(plotcolors) <- topcolors$plotnames 

## order the taxaplot so NA are at the bottom
topcolors[is.na(topcolors$plotnames),]$taxa_color <- "grey90"
natural.genus.order = as.list(c(unique(alldata$plotnames)))
no.others=natural.genus.order[!is.na(natural.genus.order)]
plot.order = append(no.others, "NA")
plot.order = unlist(plot.order)
alldata$plotnames = factor(alldata$plotnames, levels=c(plot.order))

## make the taxaplot
goose = subset(alldata, alldata$Soil.Classification=="Brunisolic Gray Luvisol")
ggplot(goose, aes(x=as.character(Row.names), y=as.numeric(relativeabundance),
                  fill=as.factor(plotnames)))+
  geom_bar(stat = "identity")+
  scale_fill_manual(values=plotcolors)+
  guides(fill=guide_legend(ncol=2))+
  facet_grid(.~Soil.Classification, scales="free", space="free")+
  theme_bw()+
  theme(panel.grid = element_blank(),
        strip.background = element_rect(fill="white"),
        axis.text.y = element_text(size = 10, colour = "black"),
        axis.title = element_text(size=10, face="bold"),
        strip.text = element_text(color="black", size=10),
        legend.text=element_text(size=6),
        axis.line = element_line(colour = "black"),
        axis.text.x = element_blank())+
  labs(y="Relative Abundance", x="Sample", fill="Taxa")


#### Accessor functions ####
# These functions allow you to see or summarise data

# If we look at sample variables and decide we only want some variables, we can view them like so:
sample_variables(mpt)
# colnames(sample_data(atamaca))
get_variable(mpt, c("Region","Environmental.Source","Soil.Classification","Compaction.Treatment")) # equivalent to "select" in tidyverse

## Let's say we want to filter OTU table by sample. 
# We can first view sample names:
sample_names(mpt)
# How many samples do we have?
nsamples(mpt)
# What is the sum of reads in each sample?
sample_sums(mpt)
# Save the sample names of the 3 samples with the most reads
getsamps <- names(sort(sample_sums(mpt), decreasing = TRUE)[1:3])
# filter to see taxa abundances for each sample
get_taxa(mpt, getsamps) 

## Conversely, let's say we want to compare OTU abundance of most abundant OTU across samples
# Look at taxa names
taxa_names(mpt)
# How many taxa do we have?
ntaxa(mpt)
# What is the total read count for each taxa?
taxa_sums(mpt)
# Let's find the top 3 most abundant taxa
gettaxa <- names(sort(taxa_sums(mpt), decreasing = TRUE)[1:3] )
get_sample(mpt, gettaxa)


######### ANALYZE ##########
# Remove non-bacterial sequences, if any
mpt_filt <- subset_taxa(mpt,  Domain == "d__Bacteria" & Class!="c__Chloroplast" & Family !="f__Mitochondria")
# Remove ASVs that have less than 2 counts total
mpt_filt_nolow <- filter_taxa(mpt_filt, function(x) sum(x)>2, prune = TRUE)
# Remove samples with less than 2 reads
mpt_final <- prune_samples(sample_sums(mpt_filt_nolow)>2, mpt_filt_nolow)

##### Saving #####
save(mpt_final, file="mpt_final.RData")
a <- mpt_final@tax_table
a_filt <- subset_taxa(a,  is.na(Species))


## Core microbiome analysis
# Convert to relative abundance
mpt_RA <- transform_sample_counts(mpt_final, fun=function(x) x/sum(x))


# Filter dataset by soil classification
mpt_brun <- subset_samples(mpt_RA, str_detect(Soil.Classification, "Brunisolic Gray Luvisol"))
mpt_orth_hfp <- subset_samples(mpt_RA, str_detect(Soil.Classification, "Orthic Humo-Ferric Podzol"))
mpt_gley_edb <- subset_samples(mpt_RA, str_detect(Soil.Classification, "Gleyed Eluviated Dystric Brunisol"))
mpt_orth_gl <- subset_samples(mpt_RA, str_detect(Soil.Classification, "Orthic Gray Luvisol"))
mpt_gley_gl <- subset_samples(mpt_RA, str_detect(Soil.Classification, "Gleyed Gray Luvisol"))
mpt_orth_db <- subset_samples(mpt_RA, str_detect(Soil.Classification, "Orthic Dystric Brunisol"))
mpt_gley_db <- subset_samples(mpt_RA, str_detect(Soil.Classification, "Gleyed Dystric Brunisol"))
mpt_mes_uh <- subset_samples(mpt_RA, str_detect(Soil.Classification, "Mesic Ultic Haploxeralfs"))
mpt_aq_gl <- subset_samples(mpt_RA, str_detect(Soil.Classification, "Aquic Glossudalfs"))
soil_na <- subset_samples(mpt_RA, is.na(Soil.Classification))

# What ASVs are found in more than 70% of samples in each antibiotic usage category?
# trying changing the prevalence to see what happens
prev_threshold <- 0.05
brun_ASVs <- core_members(mpt_brun, detection=0, prevalence = prev_threshold)
orth_hfp_ASVs <- core_members(mpt_orth_hfp, detection=0, prevalence = prev_threshold)
gley_edb_ASVs <- core_members(mpt_gley_edb, detection=0, prevalence = prev_threshold)
orth_gl_ASVs <- core_members(mpt_orth_gl, detection=0, prevalence = prev_threshold)
gley_gl_ASVs <- core_members(mpt_gley_gl, detection=0, prevalence = prev_threshold)
orth_db_ASVs <- core_members(mpt_orth_db, detection=0, prevalence = prev_threshold)
gley_db_ASVs <- core_members(mpt_gley_db, detection=0, prevalence = prev_threshold)
mes_uh_ASVs <- core_members(mpt_mes_uh, detection=0, prevalence = prev_threshold)
aq_gl_ASVs <- core_members(mpt_aq_gl, detection=0, prevalence = prev_threshold)
soil_na_ASVs <- core_members(soil_na, detection=0, prevalence = prev_threshold)

# can plot those ASVs' relative abundance
prune_taxa(brun_ASVs,mpt_RA) %>% 
  plot_bar(fill="Genus") + 
  facet_wrap(.~`Soil.Classification`, scales ="free")
prune_taxa(orth_hfp_ASVs,mpt_RA) %>% 
  plot_bar(fill="Genus") + 
  facet_wrap(.~`Soil.Classification`, scales ="free")
prune_taxa(gley_edb_ASVs,mpt_RA) %>% 
  plot_bar(fill="Genus") + 
  facet_wrap(.~`Soil.Classification`, scales ="free")
prune_taxa(orth_gl_ASVs,mpt_RA) %>% 
  plot_bar(fill="Genus") + 
  facet_wrap(.~`Soil.Classification`, scales ="free")
prune_taxa(gley_gl_ASVs,mpt_RA) %>% 
  plot_bar(fill="Genus") + 
  facet_wrap(.~`Soil.Classification`, scales ="free")
prune_taxa(orth_db_ASVs,mpt_RA) %>% 
  plot_bar(fill="Genus") + 
  facet_wrap(.~`Soil.Classification`, scales ="free")
prune_taxa(gley_db_ASVs,mpt_RA) %>% 
  plot_bar(fill="Genus") + 
  facet_wrap(.~`Soil.Classification`, scales ="free")
prune_taxa(mes_uh_ASVs,mpt_RA) %>% 
  plot_bar(fill="Genus") + 
  facet_wrap(.~`Soil.Classification`, scales ="free")
prune_taxa(aq_gl_ASVs,mpt_RA) %>% 
  plot_bar(fill="Genus") + 
  facet_wrap(.~`Soil.Classification`, scales ="free")
prune_taxa(soil_na_ASVs,mpt_RA) %>% 
  plot_bar(fill="Genus") + 
  facet_wrap(.~`Soil.Classification`, scales ="free")

# Notice that in this dataset, there are very few CORE microbiome members. This is common
### What if we wanted to make a Venn diagram of all the ASVs that showed up in each treatment?
brun_list <- core_members(mpt_brun, detection=0.001, prevalence = 0.10)
orth_hfp_list <- core_members(mpt_orth_hfp, detection=0.001, prevalence = 0.10)
gley_edb_list <- core_members(mpt_gley_edb, detection=0.001, prevalence = 0.10)
orth_gl_list <- core_members(mpt_orth_gl, detection=0.001, prevalence=0.10)
gley_gl_list <- core_members(mpt_gley_gl, detection=0.001, prevalence = 0.10)
orth_db_list <- core_members(mpt_orth_db, detection=0.001, prevalence = 0.10)
gley_db_list <- core_members(mpt_gley_db, detection=0.001, prevalence = 0.10)
mes_uh_list <- core_members(mpt_mes_uh, detection=0.001, prevalence = 0.10)
aq_gl_list <- core_members(mpt_aq_gl, detection=0.001, prevalence = 0.10)
soil_na_list <- core_members(soil_na, detection=0.001, prevalence = 0.10)

anti_list_full <- list(Brun = brun_list, Orth_hfp = orth_hfp_list, gley_edb=gley_edb_list,
                       orth_gl = orth_gl_list, gley_gl = gley_gl_list, orth_db = orth_db_list,
                       gley_db = gley_db_list, mes_uh = mes_uh_list, aq_gl = aq_gl_list,
                       soil_na = soil_na_list)



# Create a Venn diagram using all the ASVs shared and unique to antibiotic users and non users
first_venn <- ggVennDiagram(x = anti_list_full)

ggsave("venn_antibiotic.png", first_venn)

